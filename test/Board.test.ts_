import {
  calcClues,
  clearCell,
  deserializeBoard,
  fillCell,
  getGrids,
  getSize,
  newBoard,
  resizeBoard,
  serializeBoard,
} from "../Board";

describe("newBoard", () => {
  test("指定したサイズの盤面が得られる", () => {
    const board = newBoard(4, 3);

    const [width, height] = getSize(board);
    expect([width, height]).toEqual([4, 3]);

    const grids = getGrids(board);
    expect(grids).toEqual([
      [false, false, false, false],
      [false, false, false, false],
      [false, false, false, false],
    ]);
  });

  describe("異常系", () => {
    test("幅が0以下で初期化しようとするとエラーが投げられる", () => {
      expect(() => newBoard(0, 3)).toThrow();
      expect(() => newBoard(-1, 3)).toThrow();
      expect(() => newBoard(-100, 3)).toThrow();
    });

    test("高さが0以下で初期化しようとするとエラーが投げられる", () => {
      expect(() => newBoard(3, 0)).toThrow();
      expect(() => newBoard(3, -1)).toThrow();
      expect(() => newBoard(3, -100)).toThrow();
    });

    test("非整数値で初期化しようとするとエラーが投げられる", () => {
      expect(() => newBoard(3.14, 3)).toThrow();
      expect(() => newBoard(3, 3.14)).toThrow();
    });
  });
});

describe("fillCell", () => {
  test("指定した座標のセルを塗りつぶす", () => {
    const board = newBoard(3, 3);

    const cases = [
      {
        x: 0,
        y: 0,
        expected: [[true, false, false], [false, false, false], [
          false,
          false,
          false,
        ]],
      },
      {
        x: 0,
        y: 1,
        expected: [[false, false, false], [true, false, false], [
          false,
          false,
          false,
        ]],
      },
      {
        x: 0,
        y: 2,
        expected: [[false, false, false], [false, false, false], [
          true,
          false,
          false,
        ]],
      },
      {
        x: 1,
        y: 0,
        expected: [[false, true, false], [false, false, false], [
          false,
          false,
          false,
        ]],
      },
      {
        x: 1,
        y: 1,
        expected: [[false, false, false], [false, true, false], [
          false,
          false,
          false,
        ]],
      },
      {
        x: 1,
        y: 2,
        expected: [[false, false, false], [false, false, false], [
          false,
          true,
          false,
        ]],
      },
      {
        x: 2,
        y: 0,
        expected: [[false, false, true], [false, false, false], [
          false,
          false,
          false,
        ]],
      },
      {
        x: 2,
        y: 1,
        expected: [[false, false, false], [false, false, true], [
          false,
          false,
          false,
        ]],
      },
      {
        x: 2,
        y: 2,
        expected: [[false, false, false], [false, false, false], [
          false,
          false,
          true,
        ]],
      },
    ];

    for (const { x, y, expected } of cases) {
      const filledBoard = fillCell(board, x, y);

      const filledGrids = getGrids(filledBoard);
      expect(filledGrids).toEqual(expected);
    }

    // fillCell() は元の盤面を変更しない
    const originalGrids = getGrids(board);
    expect(originalGrids).toEqual([
      [false, false, false],
      [false, false, false],
      [false, false, false],
    ]);
  });

  test("すでに塗られているセルを塗ることができる", () => {
    const board = fillCell(newBoard(3, 3), 1, 1);

    const grids = getGrids(board);
    expect(grids).toEqual([
      [false, false, false],
      [false, true, false],
      [false, false, false],
    ]);

    const filledBoard = fillCell(board, 1, 1);

    const filledGrids = getGrids(filledBoard); // エラーは無い
    expect(filledGrids).toEqual([
      [false, false, false],
      [false, true, false],
      [false, false, false],
    ]);
  });

  describe("異常系", () => {
    test("指定した座標が範囲外の場合", () => {
      // 3x3 の盤面を用意
      const board = newBoard(3, 3);

      // x, y に指定できるのは 0, 1, 2 のいずれか
      // -1 以下の値や 3 以上の値を指定するとエラーが投げられる
      expect(() => fillCell(board, -1, 1)).toThrow();
      expect(() => fillCell(board, 3, 1)).toThrow();
      expect(() => fillCell(board, 1, -1)).toThrow();
      expect(() => fillCell(board, 1, 3)).toThrow();
    });

    test("座標を非整数値で指定したとき", () => {
      const board = newBoard(3, 3);

      expect(() => fillCell(board, 1.1, 1)).toThrow();
      expect(() => fillCell(board, 1, 1.1)).toThrow();
    });
  });
});

describe("clearCell", () => {
  test("指定した座標のセルを空白にする", () => {
    const board = newBoard(3, 3);
    board.grids = [
      [true, true, true],
      [true, true, true],
      [true, true, true],
    ];

    const cases = [
      {
        x: 0,
        y: 0,
        expected: [[false, true, true], [true, true, true], [true, true, true]],
      },
      {
        x: 0,
        y: 1,
        expected: [[true, true, true], [false, true, true], [true, true, true]],
      },
      {
        x: 0,
        y: 2,
        expected: [[true, true, true], [true, true, true], [false, true, true]],
      },
      {
        x: 1,
        y: 0,
        expected: [[true, false, true], [true, true, true], [true, true, true]],
      },
      {
        x: 1,
        y: 1,
        expected: [[true, true, true], [true, false, true], [true, true, true]],
      },
      {
        x: 1,
        y: 2,
        expected: [[true, true, true], [true, true, true], [true, false, true]],
      },
      {
        x: 2,
        y: 0,
        expected: [[true, true, false], [true, true, true], [true, true, true]],
      },
      {
        x: 2,
        y: 1,
        expected: [[true, true, true], [true, true, false], [true, true, true]],
      },
      {
        x: 2,
        y: 2,
        expected: [[true, true, true], [true, true, true], [true, true, false]],
      },
    ];

    for (const { x, y, expected } of cases) {
      const filledBoard = clearCell(board, x, y);

      const filledGrids = getGrids(filledBoard);
      expect(filledGrids).toEqual(expected);
    }

    // clearCell() は元の盤面を変更しない
    const originalGrids = getGrids(board);
    expect(originalGrids).toEqual([
      [true, true, true],
      [true, true, true],
      [true, true, true],
    ]);
  });

  test("空白のセルを指定して空白にできる", () => {
    const board = newBoard(3, 3);

    const grids = getGrids(board);
    expect(grids).toEqual([
      [false, false, false],
      [false, false, false],
      [false, false, false],
    ]);

    const clearedBoard = clearCell(board, 1, 1);

    const clearedGrids = getGrids(clearedBoard); // エラーは無い
    expect(clearedGrids).toEqual([
      [false, false, false],
      [false, false, false],
      [false, false, false],
    ]);
  });

  describe("異常系", () => {
    test("指定した座標が範囲外の場合", () => {
      // 3x3 の盤面を用意
      const board = newBoard(3, 3);

      // x, y に指定できるのは 0, 1, 2 のいずれか
      // -1 以下の値や 3 以上の値を指定するとエラーが投げられる
      expect(() => clearCell(board, -1, 1)).toThrow();
      expect(() => clearCell(board, 3, 1)).toThrow();
      expect(() => clearCell(board, 1, -1)).toThrow();
      expect(() => clearCell(board, 1, 3)).toThrow();
    });

    test("座標を非整数値で指定したとき", () => {
      const board = newBoard(3, 3);

      expect(() => clearCell(board, 1.1, 1)).toThrow();
      expect(() => clearCell(board, 1, 1.1)).toThrow();
    });
  });
});

describe("resizeBoard", () => {
  describe("盤面の拡大", () => {
    test("盤面のサイズを拡大できる", () => {
      const board = newBoard(2, 2);
      const resizedBoard = resizeBoard(board, 3, 3);

      const [width, height] = getSize(resizedBoard);
      expect([width, height]).toEqual([3, 3]);

      expect(resizedBoard.grids).toEqual([
        [false, false, false],
        [false, false, false],
        [false, false, false],
      ]);
    });

    test("既存の grids の状態は維持されたまま拡大される", () => {
      let board = newBoard(2, 2);
      board = fillCell(board, 0, 0);
      board = fillCell(board, 1, 0);
      board = fillCell(board, 1, 1);

      expect(board.grids).toEqual([
        [true, true],
        [false, true],
      ]);

      const resizedBoard = resizeBoard(board, 3, 3);

      const resizedGrids = getGrids(resizedBoard);
      expect(resizedGrids).toEqual([
        [true, true, false],
        [false, true, false],
        [false, false, false],
      ]);
    });
  });

  describe("盤面の縮小", () => {
    test("盤面を縮小した場合も内部的に grids のサイズは維持される", () => {
      const board = newBoard(3, 3);

      // 3x3 の grids が内部的に生成される
      expect(board.grids).toEqual([
        [false, false, false],
        [false, false, false],
        [false, false, false],
      ]);

      const resizedBoard = resizeBoard(board, 2, 2);

      const [width, height] = getSize(resizedBoard);
      expect([width, height]).toEqual([2, 2]); // width と height は更新される

      // grids は 3x3 のまま
      expect(resizedBoard.grids).toEqual([
        [false, false, false],
        [false, false, false],
        [false, false, false],
      ]);

      const resizedGrids = getGrids(resizedBoard);

      // getGrids() で取得すると width x height で切り詰められたものが得られる
      expect(resizedGrids).toEqual([
        [false, false],
        [false, false],
      ]);
    });

    test("既存の grids の状態は維持されたまま縮小される", () => {
      let board = newBoard(3, 3);
      board = fillCell(board, 1, 0);
      board = fillCell(board, 2, 0);
      board = fillCell(board, 2, 1);

      expect(board.grids).toEqual([
        [false, true, true],
        [false, false, true],
        [false, false, false],
      ]);

      const resizedBoard = resizeBoard(board, 2, 2);

      expect(resizedBoard.grids).toEqual([
        [false, true, true],
        [false, false, true],
        [false, false, false],
      ]);

      const resizedGrids = getGrids(resizedBoard);
      expect(resizedGrids).toEqual([
        [false, true],
        [false, false],
      ]);
    });
  });

  describe("サイズ変更後元のサイズに戻す", () => {
    test("既存の grids の状態が維持される", () => {
      let board = newBoard(3, 3);
      board = fillCell(board, 1, 0);
      board = fillCell(board, 2, 0);
      board = fillCell(board, 2, 1);

      expect(board.grids).toEqual([
        [false, true, true],
        [false, false, true],
        [false, false, false],
      ]);

      const cases = [
        { width: 1, height: 1 },
        { width: 1, height: 3 },
        { width: 3, height: 1 },
        { width: 3, height: 3 },
        { width: 1, height: 10 },
        { width: 10, height: 1 },
        { width: 3, height: 10 },
        { width: 10, height: 3 },
        { width: 10, height: 10 },
      ];

      for (const { width, height } of cases) {
        let resizedBoard = resizeBoard(board, width, height); // サイズ変更

        expect(getSize(resizedBoard)).toEqual([width, height]); // width と height が変更されている

        resizedBoard = resizeBoard(board, 3, 3); // 再び 3x3 に戻す

        expect(getSize(resizedBoard)).toEqual([3, 3]);
        expect(getGrids(resizedBoard)).toEqual(getGrids(board)); // 元の盤面と同じ状態になる
      }
    });
  });
});

describe("calcClues", () => {
  test("Clues を算出する", () => {
    const board = newBoard(3, 3);
    board.grids = [
      [true, true, false],
      [true, false, true],
      [true, true, false],
    ];

    const clues = calcClues(board);

    expect(clues).toEqual({
      rowClues: [
        [2],
        [1, 1],
        [2],
      ],
      columnClues: [
        [3],
        [1, 1],
        [1],
      ],
    });
  });
});

describe("serializeBoard", () => {
  test("width, height と grids のサイズが一致している場合", () => {
    const board = newBoard(3, 3);
    board.grids = [
      [true, true, false],
      [true, false, true],
      [true, true, false],
    ];

    const serialized = serializeBoard(board);

    expect(serialized).toBe("3x3;3:w;3:o;3:w");
  });

  test("width, height と grids のサイズが不一致な場合", () => {
    const board = newBoard(3, 3);
    board.grids = [
      [true, true, false, true, false],
      [true, false, true, false, false],
      [true, true, false, false, true],
      [false, true, false, true, false],
    ];

    const serialized = serializeBoard(board);

    expect(serialized).toBe("3x3;5:0;5:o;5:y;5:U");
  });
});

describe("deserializeBoard", () => {
  test("width, height と grids のサイズが一致している場合", () => {
    const serialized = "3x3;3:w;3:o;3:w";

    const board = deserializeBoard(serialized);

    expect(getSize(board)).toEqual([3, 3]);
    expect(getGrids(board)).toEqual([
      [true, true, false],
      [true, false, true],
      [true, true, false],
    ]);
  });

  test("width, height と grids のサイズが不一致な場合", () => {
    const serialized = "3x3;5:0;5:o;5:y;5:U";

    const board = deserializeBoard(serialized);

    expect(getSize(board)).toEqual([3, 3]);
    expect(board.grids).toEqual([
      [true, true, false, true, false],
      [true, false, true, false, false],
      [true, true, false, false, true],
      [false, true, false, true, false],
    ]);
  });

  describe('不正な文字列が渡されたとき', () => {
    test('不正な形式', () => {
      const serialized = "foo;bar;baz";

      expect(() => deserializeBoard(serialized)).toThrow();
    });

    test('想定しない文字が含まれる', () => {
      const serialized = "3x3;3:@;3:~;3:=";

      expect(() => deserializeBoard(serialized)).toThrow();
    });
  });
});
